//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Shoot"",
            ""id"": ""3efe0408-a7ed-46a7-a490-6981d38d298c"",
            ""actions"": [
                {
                    ""name"": ""Keyboard"",
                    ""type"": ""Button"",
                    ""id"": ""6ab8a11e-ce3e-401f-a655-056f8fadc903"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""16eb30e5-07b6-4255-b10e-e8b84d63e268"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5679234e-255c-40cf-ba53-11c6328c9063"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bbf43c7-8884-4453-84f3-e27997876ccf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChangeWeapon"",
            ""id"": ""6bd823a8-b8e4-4246-88fa-54318fbdd558"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""936b2fe4-074b-4d8f-8f74-dacd255d3b94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""type"": ""Button"",
                    ""id"": ""4c5e5833-2c5b-47d2-b740-f4f5a53c765c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8ff4a4df-1858-43be-97af-36bef677e8d1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d853c813-cf9b-49e1-bce9-85ff5807e86f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""87ebe615-a91c-4d14-b3aa-cb73f97eb6b3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba464b42-7715-4cfb-b566-418c2c5c28df"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be3fd815-d0af-44d4-bf66-e8c66ad94f35"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c32f1c98-99bb-49bd-a23b-bb3d51ec45fc"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Standard"",
            ""bindingGroup"": ""Standard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Shoot
        m_Shoot = asset.FindActionMap("Shoot", throwIfNotFound: true);
        m_Shoot_Keyboard = m_Shoot.FindAction("Keyboard", throwIfNotFound: true);
        m_Shoot_Mouse = m_Shoot.FindAction("Mouse", throwIfNotFound: true);
        // ChangeWeapon
        m_ChangeWeapon = asset.FindActionMap("ChangeWeapon", throwIfNotFound: true);
        m_ChangeWeapon_Mouse = m_ChangeWeapon.FindAction("Mouse", throwIfNotFound: true);
        m_ChangeWeapon_Keyboard = m_ChangeWeapon.FindAction("Keyboard", throwIfNotFound: true);
        m_ChangeWeapon_Next = m_ChangeWeapon.FindAction("Next", throwIfNotFound: true);
        m_ChangeWeapon_Previous = m_ChangeWeapon.FindAction("Previous", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shoot
    private readonly InputActionMap m_Shoot;
    private IShootActions m_ShootActionsCallbackInterface;
    private readonly InputAction m_Shoot_Keyboard;
    private readonly InputAction m_Shoot_Mouse;
    public struct ShootActions
    {
        private @Controls m_Wrapper;
        public ShootActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Keyboard => m_Wrapper.m_Shoot_Keyboard;
        public InputAction @Mouse => m_Wrapper.m_Shoot_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_Shoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootActions set) { return set.Get(); }
        public void SetCallbacks(IShootActions instance)
        {
            if (m_Wrapper.m_ShootActionsCallbackInterface != null)
            {
                @Keyboard.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnKeyboard;
                @Keyboard.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnKeyboard;
                @Keyboard.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnKeyboard;
                @Mouse.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnMouse;
            }
            m_Wrapper.m_ShootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Keyboard.started += instance.OnKeyboard;
                @Keyboard.performed += instance.OnKeyboard;
                @Keyboard.canceled += instance.OnKeyboard;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
            }
        }
    }
    public ShootActions @Shoot => new ShootActions(this);

    // ChangeWeapon
    private readonly InputActionMap m_ChangeWeapon;
    private IChangeWeaponActions m_ChangeWeaponActionsCallbackInterface;
    private readonly InputAction m_ChangeWeapon_Mouse;
    private readonly InputAction m_ChangeWeapon_Keyboard;
    private readonly InputAction m_ChangeWeapon_Next;
    private readonly InputAction m_ChangeWeapon_Previous;
    public struct ChangeWeaponActions
    {
        private @Controls m_Wrapper;
        public ChangeWeaponActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_ChangeWeapon_Mouse;
        public InputAction @Keyboard => m_Wrapper.m_ChangeWeapon_Keyboard;
        public InputAction @Next => m_Wrapper.m_ChangeWeapon_Next;
        public InputAction @Previous => m_Wrapper.m_ChangeWeapon_Previous;
        public InputActionMap Get() { return m_Wrapper.m_ChangeWeapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChangeWeaponActions set) { return set.Get(); }
        public void SetCallbacks(IChangeWeaponActions instance)
        {
            if (m_Wrapper.m_ChangeWeaponActionsCallbackInterface != null)
            {
                @Mouse.started -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnMouse;
                @Keyboard.started -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnKeyboard;
                @Keyboard.performed -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnKeyboard;
                @Keyboard.canceled -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnKeyboard;
                @Next.started -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnNext;
                @Next.performed -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnNext;
                @Next.canceled -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnNext;
                @Previous.started -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnPrevious;
                @Previous.performed -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnPrevious;
                @Previous.canceled -= m_Wrapper.m_ChangeWeaponActionsCallbackInterface.OnPrevious;
            }
            m_Wrapper.m_ChangeWeaponActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Keyboard.started += instance.OnKeyboard;
                @Keyboard.performed += instance.OnKeyboard;
                @Keyboard.canceled += instance.OnKeyboard;
                @Next.started += instance.OnNext;
                @Next.performed += instance.OnNext;
                @Next.canceled += instance.OnNext;
                @Previous.started += instance.OnPrevious;
                @Previous.performed += instance.OnPrevious;
                @Previous.canceled += instance.OnPrevious;
            }
        }
    }
    public ChangeWeaponActions @ChangeWeapon => new ChangeWeaponActions(this);
    private int m_StandardSchemeIndex = -1;
    public InputControlScheme StandardScheme
    {
        get
        {
            if (m_StandardSchemeIndex == -1) m_StandardSchemeIndex = asset.FindControlSchemeIndex("Standard");
            return asset.controlSchemes[m_StandardSchemeIndex];
        }
    }
    public interface IShootActions
    {
        void OnKeyboard(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
    public interface IChangeWeaponActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnKeyboard(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
    }
}
